<?php
/* 
 * Generated by MegaBuilder v1.0 
 * www.MegaBuilder.com
 */
 
class Mycourses extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Mycourses_model');
        $this->load->model('Courses_model');
        $this->load->model('Users_model');
        $this->load->model('Curriculam_model');
        $this->load->model('Course_schedule_model');
		//check user level
		$data = $this->session->userdata;
	    if(empty($data['role'])){
	        redirect(site_url().'login');
	    }elseif($data['role']=='teacher'){
	        redirect(site_url());
	    }
    } 

    /*
     * Listing of mycourses
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('mycourses/index?');
        $config['total_rows'] = $this->Mycourses_model->get_all_mycourses_count();
        $this->pagination->initialize($config);
		$uid=$_SESSION['id'];
        // $data['mycourses'] = $this->Mycourses_model->get_all_mycourses($uid,$params);
        $data['mycourses'] = $this->Mycourses_model->get_all_mycourses_admin();
        // var_dump($data);exit();
        $data['_view'] = 'mycourses/index';
        $this->load->view('layouts/main2',$data);
    }

    /*
     * Adding a new mycourses ffffff
     */
	 
	 function pending_mycourse()
    {
      
        $data['mycourses'] = $this->Mycourses_model->get_all_mycourses_nonp();
        
        $data['_view'] = 'mycourses/index';
        $this->load->view('layouts/main2',$data);
    }
/*
     * Adding a new chage status 
     */
	 
	 function status($status,$id)
    {
		if($status=='pp'){
			$params = array('purchased' => '1');
		}elseif($status=='ppr'){
			$params = array('purchased' => '0');
		}elseif($status=='mp'){
			$params = array('pstatus' => '1');
		}elseif($status=='mpr'){
			$params = array('pstatus' => '0');
		}elseif($status=='pr'){
			$params = array('pstatus' => '2');
		}elseif($status=='cmp'){
			$params = array('completed' => '1');
		}
		elseif($status=='cmpn'){
			$params = array('completed' => '0');
		}
		
		
		
		$params=$this->security->xss_clean($params);
		$this->Mycourses_model->update_mycourses($id,$params);        
        $data['mycourses'] = $this->Mycourses_model->get_all_mycourses_nonp();
        $data['_view'] = 'mycourses/index';
        $this->load->view('layouts/main2',$data);
    }

    /*
     * Adding a new mycourses ffffff
     */
	 
	 
    function add()
    {   
        $this->load->library('form_validation');

		//course_id	studentid	completed	batch_id	purchased	pstatus	cidsid
		$this->form_validation->set_rules('course_id','Course_id','trim|required|max_length[10]');
		$this->form_validation->set_rules('studentid','Studentid','trim|required|max_length[10]');
		$this->form_validation->set_rules('batch_id','Batch name','trim|required|max_length[10]');

		
		if($this->form_validation->run())     
        {   
            $params = array(
				//
				'course_id' => $this->input->post('course_id'),
				'studentid' => $this->input->post('studentid'),
				'completed' => $this->input->post('completed')

            );
            $params=$this->security->xss_clean($params);
            $mycourses_id = $this->Mycourses_model->add_mycourses($params);
            redirect('mycourses/index');
        }
        else
        {       
			
			 
           $data['users'] = $this->Users_model->user_info();
            $data['curriculam'] = $this->Curriculam_model->get_all_curriculam_list();
             
            $data['_view'] = 'mycourses/add';
            $this->load->view('layouts/main2',$data);
        }
    }  

    /*
     * Editing a mycourses
     */
    function edit($id)
    {   
        // check if the mycourses exists before trying to edit it
        $data['mycourses'] = $this->Mycourses_model->get_mycourses($id);
        ///course_id	studentid	completed	batch_id	purchased	pstatus	cidsid
        if(isset($data['mycourses']['id']))
        {
            $this->load->library('form_validation');

			//
			$this->form_validation->set_rules('course_id','Course Name','trim|required|max_length[10]');
			$this->form_validation->set_rules('studentid','Studentid','trim|required|max_length[10]');
			$this->form_validation->set_rules('batch_id','Batch Name','trim|required|max_length[10]');
		
			if($this->form_validation->run())     
            {   
                $params = array(
			 		//
					'course_id' => $this->input->post('course_id'),
					'studentid' => $this->input->post('studentid'),
					'batch_id' => $this->input->post('batch_id'),
                );
				$params=$this->security->xss_clean($params);
                $this->Mycourses_model->update_mycourses($id,$params);            
                redirect('mycourses/index');
            }
            else
            {
				$data['courses'] = $this->Courses_model->get_all_Courses();
				$data['users'] = $this->Users_model->user_info();
				$data['curriculam'] = $this->Course_schedule_model->get_all_course_schedule();
                $data['_view'] = 'mycourses/edit';
                $this->load->view('layouts/main2',$data);
            }
        }
        else
            show_error('The mycourses you are trying to edit does not exist.');
    } 

    /*
     * Deleting mycourses
     */
    function remove($id)
    {
        $mycourses = $this->Mycourses_model->get_mycourses($id);

        // check if the mycourses exists before trying to delete it
        if(isset($mycourses['id']))
        {
            $this->Mycourses_model->delete_mycourses($id);
            redirect('mycourses/index');
        }
        else
            show_error('The mycourses you are trying to delete does not exist.');
    }
    
}