<?php
/* 
 * Generated by MegaBuilder v1.0 
 * www.MegaBuilder.com
 */
 
class Users extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Users_model');
    } 

    /*
     * Listing of users
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('users/index?');
        $config['total_rows'] = $this->Users_model->get_all_users_count();
        $this->pagination->initialize($config);

        $data['users'] = $this->Users_model->get_all_users($params);
        
        $data['_view'] = 'users/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new users ffffff
     */
    function add()
    {   
        $this->load->library('form_validation');

		//
		$this->form_validation->set_rules('email','Email','trim|required|max_length[100]');
		$this->form_validation->set_rules('first_name','First_name','trim|required|max_length[100]');
		$this->form_validation->set_rules('last_name','Last_name','trim|required|max_length[100]');
		$this->form_validation->set_rules('role','Role','trim|required|max_length[10]');
		$this->form_validation->set_rules('password','Password','trim|required');
		$this->form_validation->set_rules('banned_users','Banned_users','trim|required|max_length[100]');
		
		if($this->form_validation->run())     
        {  	/// upload docsA
				$config['upload_path']   = './uploads/avatar'; 
				$config['allowed_types'] = 'gif|jpg|png'; 
				$config['max_size']      = 1000000; 
				$config['max_width']     = 3000; 
				$config['max_height']    = 3000;  
				$this->load->library('upload', $config);
				/////////////////////
				if ( ! $this->upload->do_upload('simg')) {
					$data['error']= array('error' => $this->upload->display_errors()); 
					var_dump($data);echo '1'; exit();
				 }
					
				 else { 
					$data = array('upload_data' => $this->upload->data());
					$imgname=$data['upload_data']['file_name'];							
							///////////////////// 
						$params = array(
							//
							'email' => $this->input->post('email'),
							'first_name' => $this->input->post('first_name'),
							'last_name' => $this->input->post('last_name'),
							'role' => $this->input->post('role'),
							'password' => $this->input->post('password'),
							'banned_users' => $this->input->post('banned_users'),
							'simg' => $imgname

						);
						$params=$this->security->xss_clean($params);
						$users_id = $this->Users_model->add_users($params);
						redirect('users/index');
				 }
        }
        else
        {       
			
			
				
            $data['_view'] = 'users/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a users
     */
    function edit($id)
    {   
        // check if the users exists before trying to edit it
        $data['users'] = $this->Users_model->get_users($id);
        
        if(isset($data['users']['id']))
        {
            $this->load->library('form_validation');

			//
			$this->form_validation->set_rules('email','Email','trim|required|max_length[100]');
			$this->form_validation->set_rules('first_name','First_name','trim|required|max_length[100]');
			$this->form_validation->set_rules('last_name','Last_name','trim|required|max_length[100]');
			$this->form_validation->set_rules('role','Role','trim|required|max_length[10]');
			$this->form_validation->set_rules('banned_users','Banned_users','trim|required|max_length[100]');
		
			if($this->form_validation->run())     
            {   /// upload docsA
				$config['upload_path']   = './uploads/avatar'; 
				$config['allowed_types'] = 'gif|jpg|png'; 
				$config['max_size']      = 1000000; 
				$config['max_width']     = 3000; 
				$config['max_height']    = 3000;  
				$this->load->library('upload', $config);
				/////////////////////
				if ( ! $this->upload->do_upload('simg')) {
					$data['error']= array('error' => $this->upload->display_errors()); 
					var_dump($data);echo '1'; exit();
				 }
					
				 else { 
					$data = array('upload_data' => $this->upload->data());
					$imgname=$data['upload_data']['file_name'];	
					$params = array(
						//
						'email' => $this->input->post('email'),
						'first_name' => $this->input->post('first_name'),
						'last_name' => $this->input->post('last_name'),
						'role' => $this->input->post('role'),
						'banned_users' => $this->input->post('banned_users'),
						'simg' => $imgname

					);
					$params=$this->security->xss_clean($params);
					$this->Users_model->update_users($id,$params);            
					redirect('users/index');
				 }
            }
            else
            {
                $data['_view'] = 'users/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The users you are trying to edit does not exist.');
    } 

    /*
     * Deleting users
     */
    function remove($id)
    {
        $users = $this->Users_model->get_users($id);

        // check if the users exists before trying to delete it
        if(isset($users['id']))
        {
            $this->Users_model->delete_users($id);
            redirect('users/index');
        }
        else
            show_error('The users you are trying to delete does not exist.');
    }
    
}