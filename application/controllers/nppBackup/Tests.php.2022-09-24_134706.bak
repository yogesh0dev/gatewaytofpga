<?php
/* 
 * Generated by MegaBuilder v1.0 
 * www.MegaBuilder.com
 */
 
class Tests extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Tests_model');
        $this->load->model('Courses_model');
    } 

    /*
     * Listing of tests
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('tests/index?');
        $config['total_rows'] = $this->Tests_model->get_all_tests_count();
        $this->pagination->initialize($config);

        $data['tests'] = $this->Tests_model->get_all_tests($params);
        
        $data['_view'] = 'tests/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new tests ffffff
     */
    function add()
    {   
        $this->load->library('form_validation');

		//
		$this->form_validation->set_rules('batch_id','Course_id','trim|required|max_length[10]');
		$this->form_validation->set_rules('title','Title','trim|required|max_length[255]');
		$this->form_validation->set_rules('description','Description','trim|required');

		
		if($this->form_validation->run())     
        {   /// upload docsA
				$config['upload_path']   = './uploads/tests'; 
				$config['allowed_types'] = 'gif|jpg|png|zip|xls|xlsx|doc|pdf'; 
				$config['max_size']      = 1000000; 
				$config['max_width']     = 3000; 
				$config['max_height']    = 3000;  
				
				$this->load->library('upload', $config);
				// multiple
				$count = count($_FILES['docsa']['name']);
				$kk=0;
				$coursename=$this->Courses_model->get_courses($_POST['course_id']);
				$cname=$_POST['course_id'].'_'.$coursename['title'].'_assignments';
				for($kk;$kk<$count;$kk++){
					
							$_FILES['docsa'.$kk]['name'] = $_FILES['docsa']['name'][$kk];
							$_FILES['docsa'.$kk]['type'] = $_FILES['docsa']['type'][$kk];
							$_FILES['docsa'.$kk]['tmp_name'] = $_FILES['docsa']['tmp_name'][$kk];
							$_FILES['docsa'.$kk]['error'] = $_FILES['docsa']['error'][$kk];
							$_FILES['docsa'.$kk]['size'] = $_FILES['docsa']['size'][$kk];
							$config['file_name'] = $cname.'_'.$kk;
							$this->upload->initialize($config);
						if ($this->upload->do_upload('docsa'.$kk)) {
							$aa= array('upload_data' => $this->upload->data());
							$mar[] = $aa['upload_data']['file_name'];
								
						} else {
							$data['error']= array('error' => $this->upload->display_errors()); 
						}
	
				}
				$files=json_encode($mar);
				$params = array(
				//
				'batch_id' => $this->input->post('batch_id'),
				'title' => $this->input->post('title'),
				'description' => $this->input->post('description'),
				'docsa' => $files
            );
            $params=$this->security->xss_clean($params);
            if($this->Tests_model->add_tests($params)){
				$this->session->set_flashdata('flash_message', 'Records Added Successfully!');
				redirect($_SERVER['HTTP_REFERER']);
			}

        }
        else
        {       
			
			redirect($_SERVER['HTTP_REFERER']);
        }
    }  

    /*
     * Editing a tests
     */
    function edit($id)
    {   
        // check if the tests exists before trying to edit it
        $data['tests'] = $this->Tests_model->get_tests($id);
        
        if(isset($data['tests']['id']))
        {
            $this->load->library('form_validation');

			//
			$this->form_validation->set_rules('course_id','Course_id','trim|required|max_length[10]');
$this->form_validation->set_rules('title','Title','trim|required|max_length[255]');
$this->form_validation->set_rules('description','Description','trim|required');
$this->form_validation->set_rules('docsa','Docsa','trim|required|max_length[255]');
$this->form_validation->set_rules('docsb','Docsb','trim|required|max_length[255]');
$this->form_validation->set_rules('docsc','Docsc','trim|required|max_length[255]');
$this->form_validation->set_rules('docsd','Docsd','trim|required|max_length[255]');
$this->form_validation->set_rules('docse','Docse','trim|required|max_length[255]');

		
			if($this->form_validation->run())     
            {   
                $params = array(
					//
					'course_id' => $this->input->post('course_id'),
'title' => $this->input->post('title'),
'description' => $this->input->post('description'),
'docsa' => $this->input->post('docsa'),
'docsb' => $this->input->post('docsb'),
'docsc' => $this->input->post('docsc'),
'docsd' => $this->input->post('docsd'),
'docse' => $this->input->post('docse'),

                );
				$params=$this->security->xss_clean($params);
                $this->Tests_model->update_tests($id,$params);            
                redirect('tests/index');
            }
            else
            {
                $data['_view'] = 'tests/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The tests you are trying to edit does not exist.');
    } 

    /*
     * Deleting tests
     */
    function remove($id)
    {
        $tests = $this->Tests_model->get_tests($id);

        // check if the tests exists before trying to delete it
        if(isset($tests['id']))
        {
            $this->Tests_model->delete_tests($id);
            redirect('tests/index');
        }
        else
            show_error('The tests you are trying to delete does not exist.');
    }
    
}