<?php
/* 
 * Generated by MegaBuilder v1.0 
 * www.MegaBuilder.com
 */
 
class Buycourse extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Buycourse_model');
        $this->load->model('Courses_model');
		
    } 

    /*
     * Listing of buycourse
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('buycourse/index?');
        $config['total_rows'] = $this->Buycourse_model->get_all_buycourse_count();
        $this->pagination->initialize($config);

        $data['buycourse'] = $this->Buycourse_model->get_all_buycourse($params);
        
        $data['_view'] = 'buycourse/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new buycourse ffffff
     */
    function add()
    {   
        $this->load->library('form_validation');

		//
		$this->form_validation->set_rules('name','Name','trim|required|max_length[255]');
$this->form_validation->set_rules('email','Email','trim|required|max_length[100]');
$this->form_validation->set_rules('phn','Phn','trim|required|max_length[12]');
$this->form_validation->set_rules('gender','Gender','trim|required|max_length[1]');
$this->form_validation->set_rules('dob','Dob','trim|required');
$this->form_validation->set_rules('caddress','Caddress','trim|required|max_length[255]');
$this->form_validation->set_rules('paddress','Paddress','trim|required|max_length[255]');
$this->form_validation->set_rules('state','State','trim|required|max_length[10]');
$this->form_validation->set_rules('country','Country','trim|required|max_length[10]');
$this->form_validation->set_rules('college','College','trim|required|max_length[255]');
$this->form_validation->set_rules('degree','Degree','trim|required|max_length[255]');
$this->form_validation->set_rules('designation','Designation','trim|required|max_length[255]');
$this->form_validation->set_rules('areaofexpertise','Areaofexpertise','trim|required|max_length[255]');
$this->form_validation->set_rules('resume','Resume','trim|required|max_length[255]');
$this->form_validation->set_rules('avatar','Avatar','trim|required|max_length[255]');
$this->form_validation->set_rules('duration','Duration','trim|required|max_length[50]');
$this->form_validation->set_rules('otherinfo','Otherinfo','trim|required');
$this->form_validation->set_rules('careergoals','Careergoals','trim|required');
$this->form_validation->set_rules('exp','Exp','trim|required|max_length[25]');
$this->form_validation->set_rules('course','Course','trim|required|max_length[255]');
$this->form_validation->set_rules('message','Message','trim|required');

		
		if($this->form_validation->run())     
        {   
            $params = array(
				//
				'name' => $this->input->post('name'),
'email' => $this->input->post('email'),
'phn' => $this->input->post('phn'),
'gender' => $this->input->post('gender'),
'dob' => $this->input->post('dob'),
'caddress' => $this->input->post('caddress'),
'paddress' => $this->input->post('paddress'),
'state' => $this->input->post('state'),
'country' => $this->input->post('country'),
'college' => $this->input->post('college'),
'degree' => $this->input->post('degree'),
'designation' => $this->input->post('designation'),
'areaofexpertise' => $this->input->post('areaofexpertise'),
'resume' => $this->input->post('resume'),
'avatar' => $this->input->post('avatar'),
'duration' => $this->input->post('duration'),
'otherinfo' => $this->input->post('otherinfo'),
'careergoals' => $this->input->post('careergoals'),
'exp' => $this->input->post('exp'),
'course' => $this->input->post('course'),
'message' => $this->input->post('message'),

            );
            $params=$this->security->xss_clean($params);
            $buycourse_id = $this->Buycourse_model->add_buycourse($params);
            redirect('buycourse/index');
        }
        else
        {       
			
			
				
            $data['courses']= $this->Courses_model->get_all_Courses();
            $data['_view'] = 'buycourse/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a buycourse
     */
    function edit($id)
    {   
        // check if the buycourse exists before trying to edit it
        $data['buycourse'] = $this->Buycourse_model->get_buycourse($id);
        
        if(isset($data['buycourse']['id']))
        {
            $this->load->library('form_validation');

			//
			$this->form_validation->set_rules('name','Name','trim|required|max_length[255]');
$this->form_validation->set_rules('email','Email','trim|required|max_length[100]');
$this->form_validation->set_rules('phn','Phn','trim|required|max_length[12]');
$this->form_validation->set_rules('gender','Gender','trim|required|max_length[1]');
$this->form_validation->set_rules('dob','Dob','trim|required');
$this->form_validation->set_rules('caddress','Caddress','trim|required|max_length[255]');
$this->form_validation->set_rules('paddress','Paddress','trim|required|max_length[255]');
$this->form_validation->set_rules('state','State','trim|required|max_length[10]');
$this->form_validation->set_rules('country','Country','trim|required|max_length[10]');
$this->form_validation->set_rules('college','College','trim|required|max_length[255]');
$this->form_validation->set_rules('degree','Degree','trim|required|max_length[255]');
$this->form_validation->set_rules('designation','Designation','trim|required|max_length[255]');
$this->form_validation->set_rules('areaofexpertise','Areaofexpertise','trim|required|max_length[255]');
$this->form_validation->set_rules('resume','Resume','trim|required|max_length[255]');
$this->form_validation->set_rules('avatar','Avatar','trim|required|max_length[255]');
$this->form_validation->set_rules('duration','Duration','trim|required|max_length[50]');
$this->form_validation->set_rules('otherinfo','Otherinfo','trim|required');
$this->form_validation->set_rules('careergoals','Careergoals','trim|required');
$this->form_validation->set_rules('exp','Exp','trim|required|max_length[25]');
$this->form_validation->set_rules('course','Course','trim|required|max_length[255]');
$this->form_validation->set_rules('message','Message','trim|required');

		
			if($this->form_validation->run())     
            {   
                $params = array(
					//
					'name' => $this->input->post('name'),
'email' => $this->input->post('email'),
'phn' => $this->input->post('phn'),
'gender' => $this->input->post('gender'),
'dob' => $this->input->post('dob'),
'caddress' => $this->input->post('caddress'),
'paddress' => $this->input->post('paddress'),
'state' => $this->input->post('state'),
'country' => $this->input->post('country'),
'college' => $this->input->post('college'),
'degree' => $this->input->post('degree'),
'designation' => $this->input->post('designation'),
'areaofexpertise' => $this->input->post('areaofexpertise'),
'resume' => $this->input->post('resume'),
'avatar' => $this->input->post('avatar'),
'duration' => $this->input->post('duration'),
'otherinfo' => $this->input->post('otherinfo'),
'careergoals' => $this->input->post('careergoals'),
'exp' => $this->input->post('exp'),
'course' => $this->input->post('course'),
'message' => $this->input->post('message'),

                );
				$params=$this->security->xss_clean($params);
                $this->Buycourse_model->update_buycourse($id,$params);            
                redirect('buycourse/index');
            }
            else
            {
            $data['courses']= $this->Courses_model->get_all_Courses();
                $data['_view'] = 'buycourse/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The buycourse you are trying to edit does not exist.');
    } 

    /*
     * Deleting buycourse
     */
    function remove($id)
    {
        $buycourse = $this->Buycourse_model->get_buycourse($id);

        // check if the buycourse exists before trying to delete it
        if(isset($buycourse['id']))
        {
            $this->Buycourse_model->delete_buycourse($id);
            redirect('buycourse/index');
        }
        else
            show_error('The buycourse you are trying to delete does not exist.');
    }
    
}