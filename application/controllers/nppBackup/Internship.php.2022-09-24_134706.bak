<?php
/* 
 * Generated by MegaBuilder v1.0 
 * www.MegaBuilder.com
 */
 
class Internship extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Internship_model');
        
    } 

    /*
     * Listing of internship
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('internship/index?');
        $config['total_rows'] = $this->Internship_model->get_all_internship_count();
        $this->pagination->initialize($config);

        $data['internship'] = $this->Internship_model->get_all_internship($params);
        
        $data['_view'] = 'internship/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new internship ffffff
     */
    function add()
    {   
		
        $this->load->library('form_validation');
			//var_dump($_POST);
		//
		$this->form_validation->set_rules('full_name','First Name','trim|required|max_length[255]');
		$this->form_validation->set_rules('last_name','Last Name','trim|required|max_length[255]');
		$this->form_validation->set_rules('email','Email','trim|required|max_length[100]');
		$this->form_validation->set_rules('phn','Phn','trim|required|max_length[12]');
		$this->form_validation->set_rules('gender','Gender','trim|required|max_length[10]');
		// $this->form_validation->set_rules('dob','Dob','trim|required');
		$this->form_validation->set_rules('caddress','Caddress','trim|required|max_length[255]');
		$this->form_validation->set_rules('paddress','Paddress','trim|required|max_length[255]');
		$this->form_validation->set_rules('state','State','trim|required|max_length[10]');
		$this->form_validation->set_rules('country','Country','trim|required|max_length[10]');
		$this->form_validation->set_rules('college','College','trim|required|max_length[255]');
		$this->form_validation->set_rules('degree','Degree','trim|required|max_length[255]');
		$this->form_validation->set_rules('designation','Designation','trim|required|max_length[255]');
		$this->form_validation->set_rules('areaofexpertise','Areaofexpertise','trim|required|max_length[255]');
		$this->form_validation->set_rules('duration','Duration','trim|required|max_length[50]');
		$this->form_validation->set_rules('otherinfo','Otherinfo','trim|required');
		$this->form_validation->set_rules('careergoals','Careergoals','trim|required');
		$this->form_validation->set_rules('exp','Exp','trim|required|max_length[25]');
		$this->form_validation->set_rules('course','Course','trim|required|max_length[255]');
		$this->form_validation->set_rules('message','Message','trim|required');

		
		if($this->form_validation->run())     
        {   
	
			/// upload docsA
				$config['upload_path']   = './uploads/resume'; 
				$config['allowed_types'] = 'doc|pdf'; 
				$config['max_size']      = 1000000; 
				$config['max_width']     = 3000; 
				$config['max_height']    = 3000;  
				$this->load->library('upload', $config);
				/////////////////////
				if (!$this->upload->do_upload('resume')) {
					$data['error']= array('error' => $this->upload->display_errors()); 
					//var_dump($data);echo '1'; exit();
				 }
					
			else { 
					$data = array('upload_data' => $this->upload->data());
					$imgname=$data['upload_data']['file_name'];	
					
				$params = array(
					//
					'full_name' => $this->input->post('fulle_name'),
					'last_name' => $this->input->post('last_name'),
					'email' => $this->input->post('email'),
					'phn' => $this->input->post('phn'),
					'gender' => $this->input->post('gender'),
					'dob' => $this->input->post('dob'),
					'caddress' => $this->input->post('caddress'),
					'paddress' => $this->input->post('paddress'),
					'state' => $this->input->post('state'),
					'country' => $this->input->post('country'),
					'college' => $this->input->post('college'),
					'degree' => $this->input->post('degree'),
					'designation' => $this->input->post('designation'),
					'areaofexpertise' => $this->input->post('areaofexpertise'),
					'resume' => $imgname,
					'duration' => $this->input->post('duration'),
					'otherinfo' => $this->input->post('otherinfo'),
					'careergoals' => $this->input->post('careergoals'),
					'exp' => $this->input->post('exp'),
					'course' => $this->input->post('course'),
					'message' => $this->input->post('message'),

				);
					$params=$this->security->xss_clean($params);
					$dddd=$this->Internship_model->add_internship($params);
				if($dddd){
					redirect(site_url());
				}else{
					var_dump($dddd);
				}
			}
		}
        else
        {       
			
			echo validation_errors();
        }
    }  

    /*
     * Editing a internship
     */
    function edit($id)
    {   
        // check if the internship exists before trying to edit it
        $data['internship'] = $this->Internship_model->get_internship($id);
        
        if(isset($data['internship']['id']))
        {
            $this->load->library('form_validation');

			//
			$this->form_validation->set_rules('name','Name','trim|required|max_length[255]');
$this->form_validation->set_rules('email','Email','trim|required|max_length[100]');
$this->form_validation->set_rules('phn','Phn','trim|required|max_length[12]');
$this->form_validation->set_rules('gender','Gender','trim|required|max_length[1]');
$this->form_validation->set_rules('dob','Dob','trim|required');
$this->form_validation->set_rules('caddress','Caddress','trim|required|max_length[255]');
$this->form_validation->set_rules('paddress','Paddress','trim|required|max_length[255]');
$this->form_validation->set_rules('state','State','trim|required|max_length[10]');
$this->form_validation->set_rules('country','Country','trim|required|max_length[10]');
$this->form_validation->set_rules('college','College','trim|required|max_length[255]');
$this->form_validation->set_rules('degree','Degree','trim|required|max_length[255]');
$this->form_validation->set_rules('designation','Designation','trim|required|max_length[255]');
$this->form_validation->set_rules('areaofexpertise','Areaofexpertise','trim|required|max_length[255]');
$this->form_validation->set_rules('resume','Resume','trim|required|max_length[255]');
$this->form_validation->set_rules('duration','Duration','trim|required|max_length[50]');
$this->form_validation->set_rules('otherinfo','Otherinfo','trim|required');
$this->form_validation->set_rules('careergoals','Careergoals','trim|required');
$this->form_validation->set_rules('exp','Exp','trim|required|max_length[25]');
$this->form_validation->set_rules('course','Course','trim|required|max_length[255]');
$this->form_validation->set_rules('message','Message','trim|required');

		
			if($this->form_validation->run())     
            {   
                $params = array(
					//
					'name' => $this->input->post('name'),
'email' => $this->input->post('email'),
'phn' => $this->input->post('phn'),
'gender' => $this->input->post('gender'),
'dob' => $this->input->post('dob'),
'caddress' => $this->input->post('caddress'),
'paddress' => $this->input->post('paddress'),
'state' => $this->input->post('state'),
'country' => $this->input->post('country'),
'college' => $this->input->post('college'),
'degree' => $this->input->post('degree'),
'designation' => $this->input->post('designation'),
'areaofexpertise' => $this->input->post('areaofexpertise'),
'resume' => $this->input->post('resume'),
'duration' => $this->input->post('duration'),
'otherinfo' => $this->input->post('otherinfo'),
'careergoals' => $this->input->post('careergoals'),
'exp' => $this->input->post('exp'),
'course' => $this->input->post('course'),
'message' => $this->input->post('message'),

                );
				$params=$this->security->xss_clean($params);
                $this->Internship_model->update_internship($id,$params);            
                redirect('internship/index');
            }
            else
            {
                $data['_view'] = 'internship/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The internship you are trying to edit does not exist.');
    } 

    /*
     * Deleting internship
     */
    function remove($id)
    {
        $internship = $this->Internship_model->get_internship($id);

        // check if the internship exists before trying to delete it
        if(isset($internship['id']))
        {
            $this->Internship_model->delete_internship($id);
            redirect('internship/index');
        }
        else
            show_error('The internship you are trying to delete does not exist.');
    }
    
}